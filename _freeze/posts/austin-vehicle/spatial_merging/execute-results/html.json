{
  "hash": "164546a5e2bb5b5cf9d2c0ea8b936385",
  "result": {
    "markdown": "---\ntitle: \"An Alternative to Buffers for Spatial Merging\"\nsubtitle: \"Car Crashes in Austin\"\nauthor: \"Gio Circo, Ph.D.\"\ndate: 2023-3-20\ncategories:\n  - spatial statistics\n  - cctv\n  - Rstats\nformat: \n    html:\n        self-contained: true\n        code-fold: true\n        mainfont: \"Roboto\"\n        section-divs: true\n        toc: true\n        title-block-banner: true\ntheme: flatly\nimage: \"car.png\"\n---\n\n\n## The Problem: Merging Points to Points\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(sf)\n\n\n# DATA SOURCES AND INFO\n# -----------------------------#\n# https://data.austintexas.gov\n#   vehicle crashes: 'Transportation-and-Mobility/Vision-Zero-Crash-Report-Data-Crash-Level-Records'\n#   traffic cameras: 'Transportation-and-Mobility/Traffic-Cameras/'\n#   austin council map: 'dataset/Boundaries-City-of-Austin-Council-Districts'\n\n# Select a specific Austin Council District and year\n# see: https://maps.austintexas.gov/GIS/CouncilDistrictMap/\ncnl <- 3\nyr <- 2022\n\n\n# DATA LOADING\n# -----------------------------#\n\n# Get Austin shapefile, pull only the district we need\naustin <- st_read(\"C:/Users/gioc4/Documents/blog/data/austin_city.shp\", quiet = TRUE) %>%\n  st_transform(crs = 32614) %>%\n  filter(council_di %in% cnl)\n\n# Read traffic camera data & vehicle crash data\n# Limit crashes to a specific year, conver to spatial\ncamera <- st_read(\"C:/Users/gioc4/Documents/blog/data/traffic_camera.shp\", quiet = TRUE) %>%\n  filter(camera_sta == \"TURNED_ON\") %>%\n  distinct(geometry, .keep_all = TRUE) %>%\n  st_transform(crs = 32614) %>%\n  mutate(camera_X = st_coordinates(.)[,1],\n         camera_Y = st_coordinates(.)[,2])\n\ncrash <- read_csv(unz(\"C:/Users/gioc4/Documents/blog/data/austin_crash.zip\",\"crash_data.csv\")) %>%\n  mutate(crash_date = strptime(crash_date, format=\"%m/%d/%Y %H:%M\")) %>%\n  filter(year(crash_date) == yr)\n\n# Convert crash to sf, extract coordinates\ncrash_sf <- crash %>%\n  filter(!is.na(latitude), !is.na(longitude)) %>%\n  st_as_sf(coords = c('longitude', 'latitude')) %>%\n  st_set_crs(4326) %>%\n  st_transform(crs = st_crs(camera)) %>%\n  mutate(crash_X = st_coordinates(.)[,1], \n         crash_Y = st_coordinates(.)[,2]) %>%\n  select(crash_id, crash_date, crash_X,crash_Y)\n\n# Clip to region\ncamera <- camera[austin,]\ncrash_sf <- crash_sf[austin,]\n```\n:::\n\n\nThis is a bit of a mini-blog post based on a workflow that I have used based on some of my own work. A common issue in spatial analysis - and especially in criminology - is the need to analyze points that are merged to another point. \n\nIn criminology we might say that assaults occurring right outside of a bar are within it's \"spatial influence\". Typically what is done is we define a \"buffer\" around each of the points $j$ (like bars, or gas stations) of interest and merge all of the crime incidents $i$ that are within each of the $j$ points' buffer area. This is something I've done before looking at the effect of [CCTV cameras on crime at businesses in Detroit](https://link.springer.com/article/10.1007/s11292-019-09404-y). This is pretty common across a lot of criminology research (e.g. finding all crime that occurs within a 1-block radius of bars and liquor stores).\n\nWhile I used to use the \"buffer\" method, I think there is a more efficient way of doing this via [Voronai polygons](https://en.wikipedia.org/wiki/Voronoi_diagram) which accomplishes the same goal, and allows for more flexibility in analysis. Let's illustrate this using some data from the [city of Austin](https://data.austintexas.gov/). In this example we are going to look at the incidence of car crashes $i$ around traffic cameras $j$. Our goal will be to merge car crashes to the nearest traffic camera within a defined spatial range.\n\nHere's the study area - one of the [Austin city council districts](https://maps.austintexas.gov/GIS/CouncilDistrictMap/), showing the traffic cameras in blue, and the location of crashes in red. In the picture below there are 58 cameras and about 1,700 car accidents. For this example we're restricting our analysis to only accidents that occurred in 2022 and using cameras that were active (`TURNED_ON`) at the time. We can see that there are a lot of accidents, many of them quite far from a traffic camera. Let's say we want to define a study area around each traffic camera of about 300 meters - or about 980 feet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = austin, fill = \"#88CCEE\", alpha = .3) +\n  geom_sf(data = crash_sf, color = '#BB5566', size = .6, alpha = .7) +\n  geom_sf(data = camera, color = '#004488', shape = 3, size = 2, stroke = 1.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![Location of car crahes (red) and traffic cameras (blue).](spatial_merging_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Spatial Merging using Voronoi Polygons\n\n### Voronoi Polygons\n\n[Voronoi polygons](https://en.wikipedia.org/wiki/Voronoi_diagram)(or tessellations) are useful for a number of purposes. Given a set of points $j_n$ we define a set of $n$ regions where all spaces within each region has a single nearest neighbor of the initial point $i$. Practically speaking, this just means we sub-divide a study area into smaller areas corresponding to the proximity to a point. This has many useful properties, such as determining nearest-neighbor distances from points to points. Let's see how we can do this in R.\n\nTo start, we'll first use a helper function to convert the Voronoi tessellation to an `sf` object that is suitable for merging. We'll then merge the camera data to the polygon we just created (using `st_intersection`) and pull a few of the variables we'll want for this example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Helper function to simplify tessellation\n# borrowed from: \n# https://gis.stackexchange.com/questions/362134\nst_voronoi_point <- function(points){\n  ## points must be POINT geometry\n  # check for point geometry and execute if true\n  if(!all(st_geometry_type(points) == \"POINT\")){\n    stop(\"Input not  POINT geometries\")\n  }\n  g = st_combine(st_geometry(points)) # make multipoint\n  v = st_voronoi(g)\n  v = st_collection_extract(v)\n  return(v[unlist(st_intersects(points, v))])\n}\n\n\n# create Voronoi tessellation over cameras\ncamera_poly <- st_voronoi_point(camera) %>%\n  st_intersection(austin) %>%\n  st_as_sf() %>%\n  mutate(camera_id = camera$camera_id,\n         camera_X = camera$camera_X,\n         camera_Y = camera$camera_Y)\n```\n:::\n\n\nNow we can plot the result. Below we see we now have a defined set of regions corresponding to the areas nearest to each camera. Therefore, any crashes that occur in one of the Voronoi polygons is also its nearest camera. This saves us the step of determining which point is its nearest neighbor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = camera_poly, fill = \"#88CCEE\", alpha = .3) +\n  geom_sf(data = camera, color = '#004488', shape = 3, size = 2, stroke = 1.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![All spaces within each Voronoi polygon are a nearest neighbor to a camera.](spatial_merging_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Spatial Merging\n\nAfter we've created the Voronoi regions, all we need to do is merge each point to the region it falls within (which implies the camera there is its nearest neighbor) and then compute the euclidean distance from the crash to the camera. The code below uses a for-loop to get the pairwise distances after spatial joining and then limits the output to only crashes that are within 300 feet of the nearest camera.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# JOIN AND MERGE\n# ----------------------- #\n\n# compute euclidean distance\nedist <- function(a,b){\n  sqrt(sum((a - b) ^ 2))\n}\n\n# get x-y coords for crashes and cameras\n# convert to matrix\ncamera_crash <-  st_join(crash_sf,camera_poly) %>%\n  tibble() %>%\n  select(camera_id, \n         crash_id, \n         camera_X, \n         camera_Y, \n         crash_X, \n         crash_Y)\n\ndmat <- matrix(c(camera_crash$camera_X, \n                 camera_crash$camera_Y, \n                 camera_crash$crash_X, \n                 camera_crash$crash_Y),\n               ncol = 4)\n\n# compute pairwise distances\ndlist <- list()\nfor(i in 1:nrow(dmat)){\n  dlist[[i]] <- edist(c(dmat[i,1], dmat[i,2]), c(dmat[i,3], dmat[i,4]))\n}\n\ncamera_crash$dist <- unlist(dlist)\n\n# get ids of within 300 meters\ndist_ids <- camera_crash$dist <= 300\n```\n:::\n\n\nNow we can plot the results. As we see below we now only have crashes that are within 300 feet or less of the nearest camera. One advantage of this approach is that we can make any adjustments to the spatial region we're interested in by just adjusting the filter above - or we can use the full range of distances in our analysis and look at decay effects (for example, [the effect of CCTV cameras on crime clearance](https://scholar.google.com/citations?view_op=view_citation&hl=en&user=iNNqtgwAAAAJ&sortby=pubdate&citation_for_view=iNNqtgwAAAAJ:u9iWguZQMMsC)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = austin, fill = \"#88CCEE\", alpha = .3) +\n  geom_sf(data = crash_sf[dist_ids,], color = '#BB5566', size = .6, alpha = .7) +\n  geom_sf(data = camera, color = '#004488', shape = 3, size = 2, stroke = 1.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![Car crashes within 300 meters of a traffic camera.](spatial_merging_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWith this done, we can do any kind of further investigation. For example, which camera observed the greatest number of crashes? Here, the [top-ranked camera](https://www.google.com/maps/@30.2223206,-97.7642414,3a,75y,38.43h,90.9t/data=!3m7!1e1!3m5!1sPdg-JEd0YMaRskJc47n1gw!2e0!6shttps:%2F%2Fstreetviewpixels-pa.googleapis.com%2Fv1%2Fthumbnail%3Fpanoid%3DPdg-JEd0YMaRskJc47n1gw%26cb_client%3Dmaps_sv.tactile.gps%26w%3D203%26h%3D100%26yaw%3D29.381115%26pitch%3D0%26thumbfov%3D100!7i16384!8i8192) is at a 4-way intersection leading to the highway. Also, due to its proximity to the highway, it's very likely that our distance size (300 meters, or about 900 feet) is picking up accidents that are occurring on the highway below. Of course, this is just a demonstration of method of spatial merging, *not* an investigation into traffic accidents in Austin!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncamera_crash %>%\n  filter(crash_id %in% crash_sf[dist_ids,]$crash_id) %>%\n  count(camera_id) %>%\n  arrange(desc(n)) %>%\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  camera_id     n\n  <chr>     <int>\n1 919          72\n2 674          59\n3 948          46\n4 155          44\n5 962          35\n```\n:::\n:::\n\n\n## Summary\n\nThis little mini-blog highlighted some approaches that can be taken to perform a relatively common spatial procedure. Using Voronoi polygons we looked at how we can use them to easily calculate nearest-neighbor distances. These types of spatial approaches aren't necessarily the sexiest topics, but I find they often help considerably with modelling pipelines down the road. Sometimes have a good foundation can help with further analysis later.\n\n### An Aside: An even (easier) method?\n\nOf course, another method is to simply use the a convenient function embedded in the `sf` library aptly named `st_nearest_feature()`. This takes two `sf` objects and returns the indexes of $y$ that are nearest to $x$. While the solution here is equivalent to the one above, it might not necessarily be available in your given software package. Also, while I have no testing to support this, I expect that this would likely be slow in case of many pairwise distances. The presence of the polygons helps avoid the unnecessary computation of distances between points that are not nearest neighbors.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# get index of cameras nearest to each point\nidx <- st_nearest_feature(crash_sf, camera)\nid_dist <- st_distance(camera[idx,], crash_sf, by_element = TRUE)\n\nid_dist[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnits: [m]\n         1          2          3          4          5 \n  49.88593 1202.17589  784.61324 1412.67832  282.73844 \n```\n:::\n:::\n",
    "supporting": [
      "spatial_merging_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}