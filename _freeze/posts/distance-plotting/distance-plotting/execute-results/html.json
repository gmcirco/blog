{
  "hash": "a28c59913213b3894ab0f969989594fd",
  "result": {
    "markdown": "---\ntitle: \"How to Draw Lines Between Pairs of Points in R\"\nsubtitle: \"Visualizing journeys between cities\"\nauthor: \"Gio Circo, Ph.D.\"\ndate: 2024-01-16\nformat: \n    html:\n        self-contained: false\n        code-fold: true\n        mainfont: \"Roboto\"\n        section-divs: true\n        toc: true\n        title-block-banner: true\ncategories:\n  - R\n  - Spatial Statistics\ntheme: flatly\nimage: \"map.jpg\"\n---\n\n\n## Drawing Sequences of Lines\n\n\n::: {.cell}\n\n:::\n\n\nHere's a quick one. I was recently asked how you might plot the travel of individuals over time on a map. For example, if you had longitudinal data recording the residences of respondents over a course of many years, it might be interesting to see to where and how far they traveled. Doing this in R isn't too difficult, but it isn't quite straightforward either. Below I'll show off my approach using the `sf` package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\n\nset.seed(111424)\n\n# load data\n# cities data: https://simplemaps.com/data/us-cities\n# usa states: https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_500k.zip\n\ncities <- read_csv(\"./data/uscities.csv\")\nusa <- st_read(\"./data/usa_states/cb_2018_us_state_500k.shp\")\n\n# create a base layer map\nusa_map <-\n  usa %>%\n  filter(NAME %in% state.name,!NAME %in% c(\"Alaska\", \"Hawaii\")) %>%\n  st_transform(crs = 4326)\n\n# subset 50 largest us cities\ncities_sub <- cities %>%\n  filter(state_name %in% state.name,!state_name %in% c(\"Alaska\", \"Hawaii\")) %>%\n  slice(1:50)\n```\n:::\n\n\nLet's say we have some data which lists the name of a person, the cities they've been to, and the dates they moved. We want to create a plot that draws a line (in order) of their travel between cities. A sample dataset might look something like this below. We have a person identifier and a sequence of dates that display the dates they lived in a location, along with the associated latitude and longitude.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- sample(1:length(cities_sub), 3)\n\n# sample of data\nsample_d <-\n  cities_sub %>%\n  slice(N) %>%\n  mutate(person_id = 'a12345',\n         from_date = as.Date(c('2016-12-31',\n                               '2018-04-07',\n                               '2024-03-03'))) %>%\n  select(person_id, city, from_date, lat, lng)\n\nkable(sample_d)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> person_id </th>\n   <th style=\"text-align:left;\"> city </th>\n   <th style=\"text-align:left;\"> from_date </th>\n   <th style=\"text-align:right;\"> lat </th>\n   <th style=\"text-align:right;\"> lng </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a12345 </td>\n   <td style=\"text-align:left;\"> Seattle </td>\n   <td style=\"text-align:left;\"> 2016-12-31 </td>\n   <td style=\"text-align:right;\"> 47.6211 </td>\n   <td style=\"text-align:right;\"> -122.3244 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> a12345 </td>\n   <td style=\"text-align:left;\"> Houston </td>\n   <td style=\"text-align:left;\"> 2018-04-07 </td>\n   <td style=\"text-align:right;\"> 29.7860 </td>\n   <td style=\"text-align:right;\"> -95.3885 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> a12345 </td>\n   <td style=\"text-align:left;\"> Phoenix </td>\n   <td style=\"text-align:left;\"> 2024-03-03 </td>\n   <td style=\"text-align:right;\"> 33.5722 </td>\n   <td style=\"text-align:right;\"> -112.0892 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nNow what we want to do is find a way to plot these as a linestring on a map. To do this we can create a simple function that will take this dataframe as input, and assume that for each sequence of points they are ordered from oldest to newest. The function will then extract the points and create an `st_linestring` object that links them together. Because `sf` objects interface well with `ggplot` you can easily make a direct call to plot ontop of a base map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function to iterate through n number of points\n\n# given some input distance data 'dd'\n# function expects to see a lng, lat\n# and rows sorted by sequence\n\ndistance_linestring <- function(dd){\n  points_list <- list()\n  idx = 1\n  for(i in 1:nrow(dd)){\n    points_list[[idx]] <- st_point(c(dd$lng[idx],dd$lat[idx]))\n    idx = idx+1\n  }\n  ls = st_linestring(do.call(rbind, points_list)) %>% st_sfc(crs = 4326)\n  \n  return(ls)\n}\n\n# let's draw a line between three random cities\nd1 = distance_linestring(sample_d)\n```\n:::\n\n\nAfter calling our `distance_linestring` function we take the output `d1` and plot it on our basemap.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up base map\nbase_map <- ggplot() + \n  geom_sf(data = usa_map, fill = '#FFFFFF', color = '#BBBBBB')\n\nbase_map +\n  geom_sf(data = d1, color = '#BB5566', linewidth = 1) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](distance-plotting_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nAnd there we go! A single journey.\n\n### Drawing a *lot* of lines\n\nA more common example might ask us to visualize patterns that many people take - for instance, all participants of a longitudinal survey. We can easily extend the function defined above and wrap it in a for-loop. To illustrate what this looks like I simulate some data for 100 theoretical trips between 2 and 5 cities:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# OK, let's simulate 100 people travelling up to 5 cities\n# then we store the results in a list and plot them on a base map\nlinestring_list <- list()\niter = 100\nmax_N = 5\n\nfor(i in 1:iter){\n k <- sample(2:max_N,1)\n N <- sample(1:length(cities_sub),k)\n \n linestring_list[[i]] <- distance_linestring(cities_sub[N,])\n}\n\n\n# reset basemap\nbase_map <- ggplot() + \n  geom_sf(data = usa_map, fill = '#FFFFFF', color = '#BBBBBB')\n\n# iterate through the list of locations and add each to the plot\nfor(p in 1:length(linestring_list)){\n  base_map = base_map + geom_sf(data = linestring_list[[p]], color = '#BB5566', linewidth = 1, alpha = .2)\n}\n```\n:::\n\n\nSo we just simulate a lot of journeys that go between 2 and 5 states, store them in a list, then\nrun our `linestring_list` function over it. The for-loop to add lines is a bit hack-y, but it works. We can then just plot them out:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_map +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](distance-plotting_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nAnd if we want to know how far, on average, each person traveled, we can just compute the sum of distances across our list. Simple!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# distance in meters\ndists_m <- sapply(linestring_list, st_length)\n\nhist(dists_m/1609, xlab = \"Distance in Miles\", main = \"Miles Travelled\")\n```\n\n::: {.cell-output-display}\n![](distance-plotting_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Full Data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\nlibrary(sf)\n\nset.seed(111424)\n\n# load data\n# cities data: https://simplemaps.com/data/us-cities\n# usa states: https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_500k.zip\n\ncities <- read_csv(\"./data/uscities.csv\")\nusa <- st_read(\"./data/usa_states/cb_2018_us_state_500k.shp\")\n\n# create a base layer map\nusa_map <-\n  usa %>%\n  filter(NAME %in% state.name,!NAME %in% c(\"Alaska\", \"Hawaii\")) %>%\n  st_transform(crs = 4326)\n\n# subset 50 largest us cities\ncities_sub <- cities %>%\n  filter(state_name %in% state.name,!state_name %in% c(\"Alaska\", \"Hawaii\")) %>%\n  slice(1:50)\n\n# function to iterate through n number of points\n\n# given some input distance data 'dd'\n# function expects to see a lng, lat\n# and rows sorted by sequence\n\ndistance_linestring <- function(dd){\n  points_list <- list()\n  idx = 1\n  for(i in 1:nrow(dd)){\n    points_list[[idx]] <- st_point(c(dd$lng[idx],dd$lat[idx]))\n    idx = idx+1\n  }\n  ls = st_linestring(do.call(rbind, points_list)) %>% st_sfc(crs = 4326)\n  \n  return(ls)\n}\n\n# let's draw a line between three random cities\nd1 = distance_linestring(sample_d)\n\n# set up base map\nbase_map <- ggplot() + \n  geom_sf(data = usa_map, fill = '#FFFFFF', color = '#BBBBBB')\n\nbase_map +\n  geom_sf(data = d1, color = '#BB5566', linewidth = 1) +\n  theme_void()\n\n# OK, let's simulate 100 people travelling up to 5 cities\n# then we store the results in a list and plot them on a base map\nlinestring_list <- list()\niter = 100\nmax_N = 5\n\nfor(i in 1:iter){\n k <- sample(2:max_N,1)\n N <- sample(1:length(cities_sub),k)\n \n linestring_list[[i]] <- distance_linestring(cities_sub[N,])\n}\n\n\n# reset basemap\nbase_map <- ggplot() + \n  geom_sf(data = usa_map, fill = '#FFFFFF', color = '#BBBBBB')\n\n# iterate through the list of locations and add each to the plot\nfor(p in 1:length(linestring_list)){\n  base_map = base_map + geom_sf(data = linestring_list[[p]], color = '#BB5566', linewidth = 1, alpha = .2)\n}\n\nbase_map +\n  theme_void()\n\n# distance in meters\ndists_m <- sapply(linestring_list, st_length)\n\nhist(dists_m/1609, xlab = \"Distance in Miles\", main = \"Miles Travelled\")\n```\n:::",
    "supporting": [
      "distance-plotting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}