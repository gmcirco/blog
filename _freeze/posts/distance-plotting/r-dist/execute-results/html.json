{
  "hash": "d6e49b0b3121f7a776d12cdbc4b48a0a",
  "result": {
    "markdown": "---\ntitle: \"How to Draw Lines Between Pairs of Points in R\"\nsubtitle: \"Visualizing journeys between cities\"\nauthor: \"Gio Circo, Ph.D.\"\ndate: 2024-01-16\nformat: \n    html:\n        self-contained: false\n        code-fold: true\n        mainfont: \"Roboto\"\n        section-divs: true\n        toc: true\n        title-block-banner: true\ncategories:\n  - R\n  - Spatial Statistics\ntheme: flatly\nimage: \"\"\n---\n\n\n## Drawing Sequences of Lines\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `cb_2018_us_state_500k' from data source \n  `C:\\Users\\gioc4\\Documents\\blog\\data\\usa_states\\cb_2018_us_state_500k.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 56 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1489 ymin: -14.5487 xmax: 179.7785 ymax: 71.36516\nGeodetic CRS:  NAD83\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\n\nset.seed(111424)\n\n# load data\ncities <- read_csv(\"./data/uscities.csv\")\nusa <- st_read(\"./data/usa_states/cb_2018_us_state_500k.shp\")\n\n# create a base layer map\nusa_map <-\n  usa %>%\n  filter(NAME %in% state.name,!NAME %in% c(\"Alaska\", \"Hawaii\")) %>%\n  st_transform(crs = 4326)\n\n# subset 100 largest us cities\ncities_sub <- cities %>%\n  filter(state_name %in% state.name,!state_name %in% c(\"Alaska\", \"Hawaii\")) %>%\n  slice(1:50)\n```\n:::\n\n\nLet's say we have some data which lists the name of a person, the cities they've been to, and the dates they moved. We want to create a plot that draws a line (in order) of the travel between cities. A sample dataset might look something like this below. We have a person identifier and a sequence of dates that display the dates they lived in a location.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- sample(1:length(cities_sub), 3)\n\n# sample of data\nsample_d <-\n  cities_sub %>%\n  slice(N) %>%\n  mutate(person_id = 'a12345',\n         from_date = as.Date(c('2016-12-31',\n                               '2018-04-07',\n                               '2024-03-03'))) %>%\n  select(person_id, city, from_date, lat, lng)\n\nkable(sample_d)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> person_id </th>\n   <th style=\"text-align:left;\"> city </th>\n   <th style=\"text-align:left;\"> from_date </th>\n   <th style=\"text-align:right;\"> lat </th>\n   <th style=\"text-align:right;\"> lng </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a12345 </td>\n   <td style=\"text-align:left;\"> Seattle </td>\n   <td style=\"text-align:left;\"> 2016-12-31 </td>\n   <td style=\"text-align:right;\"> 47.6211 </td>\n   <td style=\"text-align:right;\"> -122.3244 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> a12345 </td>\n   <td style=\"text-align:left;\"> Houston </td>\n   <td style=\"text-align:left;\"> 2018-04-07 </td>\n   <td style=\"text-align:right;\"> 29.7860 </td>\n   <td style=\"text-align:right;\"> -95.3885 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> a12345 </td>\n   <td style=\"text-align:left;\"> Phoenix </td>\n   <td style=\"text-align:left;\"> 2024-03-03 </td>\n   <td style=\"text-align:right;\"> 33.5722 </td>\n   <td style=\"text-align:right;\"> -112.0892 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# function to iterate through n number of points\n\n# given some input distance data 'dd'\n# function expects to see a lng, lat\n# and rows sorted by sequence\n\ndistance_linestring <- function(dd){\n  points_list <- list()\n  idx = 1\n  for(i in 1:nrow(dd)){\n    points_list[[idx]] <- st_point(c(dd$lng[idx],dd$lat[idx]))\n    idx = idx+1\n  }\n  ls = st_linestring(do.call(rbind, points_list)) %>% st_sfc(crs = 4326)\n  \n  return(ls)\n}\n\n# let's draw a line between three random cities\nd1 = distance_linestring(sample_d)\n```\n:::\n\n\nLet's see what a sample sequence might look like. We can plot the result, given the indices:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up base map\nbase_map <- ggplot() + \n  geom_sf(data = usa_map, fill = '#FFFFFF', color = '#BBBBBB')\n\n\nbase_map +\n  geom_sf(data = d1, color = '#BB5566', linewidth = 1) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](r-dist_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Drawing a *lot* of lines\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# OK, let's simulate 50 people travelling up to 5 cities\n# then we store the results in a list and plot them on a base map\nlinestring_list <- list()\niter = 100\nmax_N = 5\n\nfor(i in 1:iter){\n k <- sample(2:max_N,1)\n N <- sample(1:length(cities_sub),k)\n \n linestring_list[[i]] <- distance_linestring(cities_sub[N,])\n}\n\n\n# iterate through the list of locations and add each to the plot\nfor(p in 1:length(linestring_list)){\n  base_map = base_map + geom_sf(data = linestring_list[[p]], color = '#BB5566', linewidth = 1, alpha = .3)\n}\n```\n:::\n\n\nSo we just simulate a lot of journeys that go between 2 and 5 states, store them in a list, then\nrun our `linestring_list` function over it. The for-loop to add lines is a bit hack-y, but it works. We can then just plot them out:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_map +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](r-dist_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Full Data\n\n\n::: {.cell}\n\n:::",
    "supporting": [
      "r-dist_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}